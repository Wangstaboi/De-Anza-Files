array.h
-------
class Array 
    {
public:
    Array(int n);                       // Constructor: 
                                        //   Create array of n elements 
    Array();                            // Default constructor:
                                        //   Create array of 0 elements 
    ~Array();                           // Destructor:Destroy array(comment 1)
    Array(const Array &);               // Copy array (comment 2:
                                        //   Copy constructor)

    int numElts();                      // Number of elements 
    Array & operator = (const Array &); // Array assignment 
    Array & operator = (float);         // Scalar assignment (comment 3)
    void setSize(int n);                // Change size 

    float &operator[] (int i);          // Subscripting (comment 4)

private:
    int num_elts;                       // Number of elements 
    float *ptr_to_data;                 // Pointer to data
    void copy(const Array & a);         // Copy elements of a 
    };

void error(const char *s);              // For bounds checking

array.cc
--------
#include "array.h"

Array::Array(int n) 
    {
    num_elts = n;
    ptr_to_data = new float[n];
    }
Array::Array() 
    {
    num_elts = 0;
    ptr_to_data = 0;
    }

Array::~Array()                          // Destructor
    {
    delete[] ptr_to_data;                
    }

Array::Array(const Array& a)             // Copy constructor
    {
    num_elts = a.num_elts;
    ptr_to_data = new float[num_elts];
    copy(a);                             // Copy a's elements 
    }

void Array::copy(const Array& a) 
    {
    // Copy a's elements into the elements of *this 
    float *p = ptr_to_data + num_elts;
    float *q = a.ptr_to_data + num_elts;
    while (p > ptr_to_data)
         *--p = *--q;
    }

float& Array::operator[](int i) 
    {
    #ifdef CHECKBOUNDS
      if(i<0 || i>num_elts)
        error("out of bounds");
    #endif
    return ptr_to_data[i];
    }

int Array::numElts() 
    {
    return num_elts;
    }

Array& Array::operator=(const Array& rhs) 
    {
    if (ptr_to_data != rhs.ptr_to_data)
        {
        setSize(rhs.num_elts);
       	copy(rhs);
        }
    return *this;
    }

void Array::setSize(int n) 
    {
    if (n != num_elts)
       {
        delete[] ptr_to_data;               // Delete old elements, 
        num_elts = n;                       // set new count, 
       	ptr_to_data = new float[n];         // and allocate new elements 
       }
    }

Array& Array::operator=(float rhs) 
    {
    float *p = ptr_to_data + num_elts;
    while (p > ptr_to_data)
        *--p = rhs;
    return *this;
    }

void error(const char *s)
    {
    cerr << endl << s << endl; //1st "endl" is in case program is printing
    cout << endl << s << endl; //something out when the error occurs
    cout.flush();              //write the output buffer to the screen
                               //or wherever the output of cout goes.
    abort();
    }